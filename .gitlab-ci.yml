# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - stage
  - deploy

build-docker:
  stage: build
  tags:
    - tests_laravel
  variables:
      # these values may need to be different if using TLS, k8s, etc.
      # You can alternatively set defaults in your runner config
    DOCKER_HOST: tcp://docker:2376/
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
  only:
    - main
    - dev
  services: 
    - docker-dind
  before_script:
    - echo "${ACCESS_TOKEN}" | docker login -u Deployer --password-stdin registry.pro-technologii.ru
  script:
    - docker build -t ${IMAGE_NAME} --build-arg branch=${CI_COMMIT_REF_NAME} -f ./config/app/Dockerfile .
    - docker push ${IMAGE_NAME}

#feature-test-job:       # This job runs in the build stage, which runs first.
#  stage: test
#  tags:
#    - tests_laravel
#  before_script:
#    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
#    - php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
#    - php composer-setup.php
#    - php -r "unlink('composer-setup.php');"
#  script:
#    - echo "Installing dependencies.."
#    - composer install
#    - echo "Run feature tests..."
#    - php artisan test

#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"


#deploy-job:      # This job runs in the deploy stage.
# stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  environment: production
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."


#featfure_unit_tests:
#  services:
#    - postgres:12.2
#  variables:
#    POSTGRES_DB: testing
#    POSTGRES_USER: postgres
#    POSTGRES_PASSWORD: password
#    POSTGRES_HOST_AUTH_METHOD: trust
#  image: registry.pro-technologii.ru/development/ecms:latest
#  stage: test
#  tags:
#    - tests_laravel
#  script:
#    - cp .env.unit-testing .env
#    - composer install
#    - php artisan test
#  artifacts:
#    paths:
#      - "vendor"
#    when: on_success
#    expire_in: 1 days


#staging_deploy:
#  stage: pre-production
#  tags:
#    - staging
#  only:
#    - main
#  script:
#    - pwd
#    - ./vendor/bin/sail down
#    - cp .env.pre-production .env
#    - ./vendor/bin/sail up -d
#    - ./vendor/bin/sail artisan key:generate

